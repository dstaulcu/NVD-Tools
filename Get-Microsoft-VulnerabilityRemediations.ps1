<#
https://github.com/microsoft/MSRC-Microsoft-Security-Updates-API
https://portal.msrc.microsoft.com/en-us/security-guidance
https://portal.msrc.microsoft.com/en-us/developer  

#>

### Install the module from the PowerShell Gallery
Install-Module -Name MsrcSecurityUpdates -Scope CurrentUser

### Load the module
Import-Module -Name MsrcSecurityUpdates

### GET/SET THE API KEY
$apikeyfile = "$($env:userprofile)\documents\msrc_apikey.txt"
if (!(Test-Path -Path $apikeyfile)) { 
    write-host "api key file not foundin $($apikeyfile)"
    break 
} 
$apikey = Get-Content -Path $apikeyfile 
Set-MSRCApiKey -ApiKey $apikey

### INITIALIZE OUTPUT FILE
$outputfile = "$($env:TEMP)\Microsoft-Security-Updates.csv"
if (Test-Path -Path $outputfile) { Remove-Item -Path $outputfile -Force } 

### INITIALIZE REPORT DATE FILTER
$currentdate = get-date
$currentYear = $currentdate.Year
$currentMonth = $currentdate.Month

### GET ALL POSSIBLE REPORT NAMES
$Reports = @()
for ($year = 2016; $year -le $currentYear; $year++)
{ 
    for ($month = 1; $month -le 12; $month++)
    {
        if (!(($year -eq "2016" -and $month -lt 4) -or ($year -eq $currentYear -and $month -gt $currentMonth)))
        {
            $monthname = (Get-Culture).DateTimeFormat.GetMonthName($month).Substring(0,3)
            $monthOfInterest = "$($year)-$($monthname)"
            $Reports += $monthOfInterest
        }

    }    
}

# PROMPT USER FOR PRODUCTS OF INTEREST BASED ON CURRENT MONTH PRODUCTS
$cvrfDoc = Get-MsrcCvrfDocument -ID $Reports[-1]
$Selected = $CVRFDoc.ProductTree.FullProductName | Sort-object Value | Out-GridView -PassThru -Title "Select one or products to include"
if (!($Selected)) { Break } 

# BUILD A REGEXP MATCH STRING FOR THE SELECTED PRODUCTS
$ProductsOfInterest = ""
foreach ($selection in $Selected) {
    if ($ProductsOfInterest -eq "") {         
        $ProductsOfInterest = $selection.ProductID
    } else {
        $ProductsOfInterest += "|$($selection.ProductID)"

    }
}
$ProductsOfInterest = "($($ProductsOfInterest))"


### RUN REPORT FOR EACH MONTH (USE -1 ARRAY SLICE FOR MOST RECENT MONTH)
foreach ($Report in $Reports[-1]) {
    Write-host "Getting CVRF Document for report $($Report)."

    ### GET MICROSFT COMMON VULNERABILITY RESPONSE FRAMEWORK DOCUMENT FOR PERIOD OF INTEREST
    $cvrfDoc = Get-MsrcCvrfDocument -ID $Report

    ### BUILD RECORDSET OF PRODUCT PATCH INFO FOR REMEDIATIONS TO CVE VULNERABILITES
    $Records = @()
    foreach ($Vulnerability in $cvrfDoc.Vulnerability) {

        ### LOOP THROUGH REMEDIATIONS
        foreach ($Remediation in $Vulnerability.Remediations | WHERE SubType -eq "Security Update") {

            ### LOOP THROUGH PRODUCTS
            foreach ($ProductID in $Remediation.ProductID) {
        
                ### PROCESS ONLY PRODUCTS OF INTEREST
                if ($ProductID -match  "^$($ProductsOfInterest)$") {
   
                    ### PREPARE OF HASHTABLE HAVING VALUES OF INTEREST
                    $info = @{
                        CVE = $Vulnerability.CVE
                        CvrfDocument = $Report
                        LastRevisionDate = ($vulnerability.RevisionHistory | Sort-Object -Property Number -Descending  | Select-Object -First 1).Date
                        FullProductName = ($CVRFDoc.ProductTree.FullProductName | Where ProductID -eq ($ProductID)).Value
                        Article = ($Remediation.Description).Value
                        Severity = ((($Vulnerability.Threats | ?{(($_.ProductID -eq $ProductID) -AND ($_.'Type' -eq 3))})).Description).Value
                        Impact = ((($Vulnerability.Threats | ?{(($_.ProductID -eq $ProductID) -AND ($_.'Type' -eq 0))})).Description).Value
                        Title = ($Vulnerability.Title).Value
                        DownloadURL = $Remediation.URL
                        #Notes = ($Vulnerability.Notes | Where Title -EQ "Description").Value -replace '<[^>]+>',''
                    }

                    ### APPEND HASHTABLE (RECORD) TO PSCUSTOMBJECT (RECORDSET)
                    $Records += New-Object -TypeName PSObject -Property $Info
                }
            }
        }       
    } 

    $Records | Sort-Object -Property CVE, FullProductName -Descending | Select CVE, CvrfDocument, LastRevisionDate, FullProductName, Article, Severity, Impact, Title, DownloadURL | Export-Csv -Path $outputfile -NoTypeInformation -Append
}

Import-Csv -Path $outputfile | Out-GridView -Title "Security updates in $($outputfile)."
