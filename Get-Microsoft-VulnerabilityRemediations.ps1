<#

RESOURCES:

Interactive MRSC web interface for looking up security updates by CVE, product and time-range:
https://portal.msrc.microsoft.com/en-us/security-guidance   

APIs available for interfacing with datasets supporting MSRC web interface
https://github.com/microsoft/MSRC-Microsoft-Security-Updates-API

Web interface for API keys enabling REST interfaces to MSRC
https://portal.msrc.microsoft.com/en-us/developer  

TODO:
- Explore potential use of Get-MsrcCvrfExploitabilityIndex
- Explore potential use of Get-MsrcCvrfAffectedSoftware to enable filtering of produts by product type/line
#>

$outputfile_consolidated = "C:\apps\NVD-Tools\consolidated.csv"
if (Test-Path -Path $outputfile_consolidated) { Remove-Item -Path $outputfile_consolidated }

### Install the module from the PowerShell Gallery
Install-Module -Name MsrcSecurityUpdates -Scope CurrentUser

### Load the module
Import-Module -Name MsrcSecurityUpdates

### GET/SET THE API KEY
$apikeyfile = "C:\apps\mrsc_apikey.txt"
if (!(Test-Path -Path $apikeyfile)) { 
    write-host "api key file not foundin $($apikeyfile)"
    break 
} 
$apikey = Get-Content -Path $apikeyfile 
Set-MSRCApiKey -ApiKey $apikey

### GET ALL POSSIBLE MSRC SECURITY UPDATE CVRF DOCUMENTS
$SecurityUpdates = Get-MsrcSecurityUpdate

### DETERMINE IF THERE ARE ANY UPDATES WE ALREADY PROCESSED
$LastUpdates = @()
$LastUpdateFile = "C:\apps\NVD-Tools\LastUpdates.csv"
if (Test-Path -Path $LastUpdateFile) {
    $LastUpdates = Import-Csv -Path $LastUpdateFile
}

### RUN REPORT FOR EACH MONTH
$SecurityUpdateCounter = 0
foreach ($SecurityUpdate in $SecurityUpdates) {
    $SecurityUpdateCounter++
    $pct_complete = ($SecurityUpdateCounter / $SecurityUpdates.Count*100)
    Write-Progress -Activity "Processing $($SecurityUpdate.DocumentTitle) CVRF document." -Status "Step $($SecurityUpdateCounter) of $($SecurityUpdates.count)" -PercentComplete $pct_complete;

    ### SKIP UPDATES WE HAVE ALREADY PROCESSED
    $thisupdate = $LastUpdates | Where-Object {(($_.ID -eq $SecurityUpdate.ID) -and ($_.CurrentReleaseDate -eq $SecurityUpdate.CurrentReleaseDate))}
    if (!($thisupdate)) {

        ### INITIALIZE OUTPUT FILE
        $outputfile = "C:\apps\NVD-Tools\MSCVRF_$($SecurityUpdate.ID).csv"
        write-host $outputfile
        if (Test-Path -Path $outputfile) { Remove-Item -Path $outputfile -Force } 

        ### GET MICROSFT COMMON VULNERABILITY RESPONSE FRAMEWORK DOCUMENT FOR PERIOD OF INTEREST
        $cvrfDoc = Get-MsrcCvrfDocument -ID $SecurityUpdate.ID

        ### BUILD RECORDSET OF PRODUCT PATCH INFO FOR REMEDIATIONS TO CVE VULNERABILITES
        $Records = @()
        foreach ($Vulnerability in $cvrfDoc.Vulnerability) {

            ### LOOP THROUGH REMEDIATIONS OF TYPE VENDOR FIX  [Types: 'Workaround' (0), 'Mitigation' (1), VendorFix (2)]
            foreach ($Remediation in $Vulnerability.Remediations | Where-Object {$_.Type -eq "2"}) {

                ### LOOP THROUGH PRODUCTS
                foreach ($ProductID in $Remediation.ProductID) {
          
                    ### PREPARE OF HASHTABLE HAVING VALUES OF INTEREST FOR PRODUCT CVES
                    $info = @{
                        CVE = $Vulnerability.CVE
                        CvrfDocument = $SecurityUpdate.DocumentTitle
                        LastRevisionDate = ($vulnerability.RevisionHistory | Sort-Object -Property Number -Descending  | Select-Object -First 1).Date
                        FullProductName = ($CVRFDoc.ProductTree.FullProductName | Where-Object ProductID -eq ($ProductID)).Value
                        Article = ($Remediation.Description).Value
                        Severity = ((($Vulnerability.Threats | where-object {(($_.ProductID -eq $ProductID) -AND ($_.'Type' -eq 3))})).Description).Value
                        Impact = ((($Vulnerability.Threats | where-object {(($_.ProductID -eq $ProductID) -AND ($_.'Type' -eq 0))})).Description).Value
                        Title = ($Vulnerability.Title).Value
                        Supercedence = $Remediation.Supercedence
                    }

                    ### APPEND HASHTABLE (RECORD) TO PSCUSTOMBJECT (RECORDSET)
                    $Records += New-Object -TypeName PSObject -Property $Info
                }
            }       
        }
        $Records = $Records | Where-Object {$_.CVE -match "^CVE"}
        $Records | Select-Object CVE, CvrfDocument, LastRevisionDate, FullProductName, Article, Severity, Impact, Title, Supercedence | Export-Csv -Path $outputfile -NoTypeInformation
        $Records | Select-Object CVE, CvrfDocument, LastRevisionDate, FullProductName, Article, Severity, Impact, Title, Supercedence | Export-Csv -Path $outputfile_consolidated -NoTypeInformation -Append
    } 
    #### Update the LastUpdates file
    $SecurityUpdates | Export-Csv -Path $LastUpdateFile -NoTypeInformation -Force
}

