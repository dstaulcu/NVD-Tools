<#

RESOURCES:

Interactive MRSC web interface for looking up security updates by CVE, product and time-range:
https://portal.msrc.microsoft.com/en-us/security-guidance   

APIs available for interfacing with datasets supporting MSRC web interface
https://github.com/microsoft/MSRC-Microsoft-Security-Updates-API

Web interface for API keys enabling REST interfaces to MSRC
https://portal.msrc.microsoft.com/en-us/developer  

TODO:
- Explore potential use of Get-MsrcCvrfExploitabilityIndex
- Explore potential use of Get-MsrcCvrfAffectedSoftware to enable filtering of produts by product type/line
#>

### Install the module from the PowerShell Gallery
Install-Module -Name MsrcSecurityUpdates -Scope CurrentUser

### Load the module
Import-Module -Name MsrcSecurityUpdates

### GET/SET THE API KEY
$apikeyfile = "$($env:userprofile)\documents\msrc_apikey.txt"
if (!(Test-Path -Path $apikeyfile)) { 
    write-host "api key file not foundin $($apikeyfile)"
    break 
} 
$apikey = Get-Content -Path $apikeyfile 
Set-MSRCApiKey -ApiKey $apikey

### INITIALIZE OUTPUT FILE
$outputfile = "$($env:TEMP)\Microsoft-Security-Updates.csv"
if (Test-Path -Path $outputfile) { Remove-Item -Path $outputfile -Force } 

### GET ALL POSSIBLE MSRC SECURITY UPDATE CVRF DOCUMENTS
$SecurityUpdates = Get-MsrcSecurityUpdate

### PROMPT USER SELECT MSRC SECURITY UPDATE CVRF DOCUMENTS OF INTEREST
<# disabled by default for non-interactive use
[array]$SelectedSecurityUpdates = $SecurityUpdates | sort-object -Property InitialReleaseDate -Descending | Select-object -Property InitialReleaseDate, DocumentTitle, ID | Out-GridView -Title "Select one or more Microsoft CVRF reports" -PassThru
if (!($SelectedSecurityUpdates)) { Break } 
#>
[array]$SelectedSecurityUpdates = $SecurityUpdates[-1] | sort-object -property InitialReleaseDate  # slice brings back last N months for testing. comment this line for interactive use

### PROMPT USER FOR PRODUCTS OF INTEREST BASED ON CURRENT MONTH PRODUCTS
<# disabled by default for non-interactive use
$cvrfDoc = Get-MsrcCvrfDocument -ID $Reports[-1].Name
[array]$SelectedProducts = $CVRFDoc.ProductTree.FullProductName | Sort-object Value | Out-GridView -PassThru -Title "Select one or more products to include"
if (!($SelectedProducts)) { Break } 

# BUILD A REGEXP MATCH STRING FOR THE SELECTED PRODUCTS
$ProductsOfInterest = ".*"
foreach ($product in $SelectedProducts) {
    if ($ProductsOfInterest -eq "") {         
        $ProductsOfInterest = $product.ProductID
    } else {
        $ProductsOfInterest += "|$($product.ProductID)"

    }
}
$ProductsOfInterest = "($($ProductsOfInterest))"
#>
$ProductsOfInterest = "(.*)"   # regexp override returning all products.  comment this line for interactive use

### RUN REPORT FOR EACH MONTH
$ReportCounter = 0
foreach ($Report in $SelectedSecurityUpdates) {
    $ReportCounter++
    $pct_complete = ($ReportCounter / $SelectedSecurityUpdates.Count*100)
    Write-Progress -Activity "Processing $($Report.DocumentTitle) CVRF document." -Status "Step $($ReportCounter) of $($SelectedSecurityUpdates.count)" -PercentComplete $pct_complete;


    ### GET MICROSFT COMMON VULNERABILITY RESPONSE FRAMEWORK DOCUMENT FOR PERIOD OF INTEREST
    $cvrfDoc = Get-MsrcCvrfDocument -ID $Report.ID
    # $ExploitabilityIndex = $cvrfDoc | Get-MsrcCvrfExploitabilityIndex
    # $AffectedSoftware = $cvrfDoc | Get-MsrcCvrfAffectedSoftware

    ### BUILD RECORDSET OF PRODUCT PATCH INFO FOR REMEDIATIONS TO CVE VULNERABILITES
    $Records = @()
    foreach ($Vulnerability in $cvrfDoc.Vulnerability) {

        ### LOOP THROUGH REMEDIATIONS OF TYPE VENDOR FIX  [Types: 'Workaround' (0), 'Mitigation' (1), VendorFix (2)]
        foreach ($Remediation in $Vulnerability.Remediations | Where-Object {$_.Type -eq "2"}) {

            ### LOOP THROUGH PRODUCTS
            foreach ($ProductID in $Remediation.ProductID) {
        
                ### PROCESS ONLY PRODUCTS OF INTEREST
                if ($ProductID -match  "^$($ProductsOfInterest)$") {
   
                    ### PREPARE OF HASHTABLE HAVING VALUES OF INTEREST FOR PRODUCT CVES
                    $info = @{
                        CVE = $Vulnerability.CVE
                        CvrfDocument = $Report.DocumentTitle
                        LastRevisionDate = ($vulnerability.RevisionHistory | Sort-Object -Property Number -Descending  | Select-Object -First 1).Date
                        FullProductName = ($CVRFDoc.ProductTree.FullProductName | Where-Object ProductID -eq ($ProductID)).Value
                        Article = ($Remediation.Description).Value
                        Severity = ((($Vulnerability.Threats | where-object {(($_.ProductID -eq $ProductID) -AND ($_.'Type' -eq 3))})).Description).Value
                        Impact = ((($Vulnerability.Threats | where-object {(($_.ProductID -eq $ProductID) -AND ($_.'Type' -eq 0))})).Description).Value
                        Title = ($Vulnerability.Title).Value
                        Supercedence = $Remediation.Supercedence
                    }

                    ### APPEND HASHTABLE (RECORD) TO PSCUSTOMBJECT (RECORDSET)
                    $Records += New-Object -TypeName PSObject -Property $Info
                }
            }
        }       
    } 

    $Records = $Records | Where-Object {$_.CVE -match "^CVE"}
    $Records | Select-Object CVE, CvrfDocument, LastRevisionDate, FullProductName, Article, Severity, Impact, Title, Supercedence | Export-Csv -Path $outputfile -NoTypeInformation -Append
}

Import-Csv -Path $outputfile | Sort-Object -Property CVE, FullProductName -Descending | Out-GridView -Title "Security updates in $($outputfile)."
